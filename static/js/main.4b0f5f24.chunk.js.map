{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","GameOfLife.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","RenderGame","props","react_default","a","createElement","ReactKonva","width","innerWidth","height","innerHeight","game","GameOfLife","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","map","rectangles","map1","generateMap","map2","currentMap","_this2","setState","start","intervalID","setInterval","tick","clearInterval","new_map","new_rectangles","i","y","j","x","gameOfLifeRules","push","fill","Array","Number","Math","round","random","neighbors","getNeighbors","total","up","down","left","right","React","ReactDOM","render","src_GameOfLife","floor","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b0f5f24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Stage, Layer, Rect } from \"react-konva\";\r\n\r\nclass GameOfLife extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            map: null,\r\n            rectangles: []\r\n        }\r\n        this.map1 = this.generateMap();\r\n        this.map2 = this.generateMap();\r\n        this.currentMap = 1;\r\n    }\r\n\r\n    render() {\r\n        return <div><RenderGame game={this.state.rectangles}/></div>\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            map: this.map1,\r\n            start: true,\r\n        });\r\n\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1/30\r\n        );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    tick() {\r\n        var new_rectangles = [];\r\n        let new_map;\r\n        if(this.currentMap === 1 )  {\r\n            new_map = this.map2;\r\n            this.currentMap = 2;\r\n        } else {\r\n            new_map = this.map1;\r\n            this.currentMap = 1;\r\n        }\r\n        for(var i = 0; i < this.props.y; i++) {\r\n            for(var j = 0; j < this.props.x; j++) {\r\n                new_map[i][j] = this.gameOfLifeRules(i, j, this);\r\n                if(new_map[i][j] === 1) \r\n                    new_rectangles.push(\r\n                        <Rect\r\n                            x={j * 10}\r\n                            y={i * 10}\r\n                            width={10}\r\n                            height={10}\r\n                            fill={\"rgb(0,0,0)\"}\r\n                        />\r\n                    );\r\n            }\r\n        }\r\n        this.setState({\r\n            map: new_map,\r\n            rectangles: new_rectangles\r\n        });\r\n     }\r\n\r\n     generateMap() {\r\n        var new_map = new Array(Number(this.props.y));\r\n        for(var i = 0; i < this.props.y; i++) {\r\n            new_map[i] = Array(Number(this.props.x))\r\n            for(var j = 0; j < this.props.x; j++) {\r\n                new_map[i][j] = Math.round(Math.random());\r\n            }\r\n        }\r\n        return new_map;\r\n    }\r\n\r\n    gameOfLifeRules(i, j) {\r\n        var neighbors = this.getNeighbors(i, j);\r\n        if(this.state.map[i][j] === 1) {\r\n            if(neighbors < 2 || neighbors > 3)\r\n                return 0;\r\n            else if(neighbors === 2 || neighbors === 3)\r\n                return  1;\r\n        } else if (this.state.map[i][j] === 0) {\r\n            if(neighbors === 3)\r\n                return 1;\r\n            else\r\n                return 0;\r\n        } \r\n    }\r\n\r\n    getNeighbors(i, j) {\r\n        var total = 0;\r\n\r\n        var up = (i - 1 < 0 ? this.props.y-1 : i - 1);\r\n        var down = (i + 1 >= this.props.y ? 0 : i + 1);\r\n        var left = (j - 1 < 0 ? this.props.x-1 : j - 1);\r\n        var right = (j + 1 >= this.props.x ? 0 : j + 1);\r\n\r\n       total += this.state.map[up][left];\r\n       total += this.state.map[up][j];\r\n       total += this.state.map[up][right];\r\n       total += this.state.map[i][left];\r\n       total += this.state.map[i][right];\r\n       total += this.state.map[down][left];\r\n       total += this.state.map[down][j];\r\n       total += this.state.map[down][right];\r\n  \r\n        return total\r\n    }\r\n}\r\n\r\nfunction RenderGame(props) {\r\n    return(<Stage width={window.innerWidth} height={window.innerHeight}>\r\n                <Layer>\r\n                    {props.game}\r\n                </Layer>\r\n            </Stage>)\r\n}\r\n\r\nexport default GameOfLife;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GameOfLife from './GameOfLife';\n\nReactDOM.render(<GameOfLife x={Math.floor(window.innerWidth / 10)} y={Math.floor(window.innerHeight / 10)} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}