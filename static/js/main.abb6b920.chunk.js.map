{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","GameOfLife.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","ControlPanel","props","react_default","a","createElement","onClick","runGame","state","empty","random","grid","RenderGame","ReactKonva","width","innerWidth","height","innerHeight","game","GameOfLife","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","map","rectangles","running","map1","generateRandomMap","map2","generateEmptyMap","currentMap","onKeyPressed","bind","assertThisInitialized","generateEmptyMapAction","generateRandomMapAction","showGrid","createGrid","lines","i","push","points","Math","round","stroke","strokeWidth","j","e","console","log","nativeEvent","offsetX","offsetY","setMapPosition","x","y","new_map","new_rectangles","floor","fill","setState","t","onMouseMove","_this2","intervalID","setInterval","tick","document","addEventListener","clearInterval","removeEventListener","gameOfLifeRules","Array","Number","neighbors","getNeighbors","total","up","down","left","right","key","React","ReactDOM","render","src_GameOfLife","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abb6b920.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\r\n\r\nclass GameOfLife extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            map: null,\r\n            rectangles: [],\r\n            running: false,\r\n            grid: false\r\n        }\r\n        this.map1 = this.generateRandomMap();\r\n        this.map2 = this.generateEmptyMap();\r\n        this.currentMap = 1;\r\n        this.onKeyPressed = this.onKeyPressed.bind(this);\r\n        this.runGame = this.runGame.bind(this);\r\n        this.generateEmptyMapAction = this.generateEmptyMapAction.bind(this);\r\n        this.generateRandomMapAction = this.generateRandomMapAction.bind(this);\r\n        this.onClick = this.onClick.bind(this);\r\n        this.showGrid = this.showGrid.bind(this);\r\n\r\n        this.grid = this.createGrid();\r\n    }\r\n\r\n    createGrid() {\r\n    var lines = [];\r\n        for (var i = 0; i < window.innerWidth; i++) {\r\n            lines.push(<Line\r\n                points={[Math.round(i * 10) + 0.5, 0,  Math.round(i * 10) + 0.5, window.innerHeight]}\r\n                stroke=\"#ddd\"\r\n                strokeWidth={1}\r\n                />);\r\n        }\r\n        for (var j = 0; j < window.innerHeight; j++) {\r\n            lines.push(<Line\r\n                points={[0, Math.round(j * 10),  window.innerWidth, Math.round(j * 10)]}\r\n                stroke=\"#ddd\"\r\n                strokeWidth={0.5}\r\n                />);\r\n        }\r\n        return lines;\r\n    }\r\n\r\n    onClick(e) {\r\n        console.log(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n        this.setMapPosition(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\r\n        \r\n    }\r\n\r\n    setMapPosition(x, y) {\r\n        let new_map;\r\n        let new_rectangles = [];\r\n        if(this.currentMap === 1 )  {\r\n            new_map = this.map2;\r\n            this.currentMap = 2;\r\n        } else {\r\n            new_map = this.map1;\r\n            this.currentMap = 1;\r\n        }\r\n        for(var i = 0; i < this.props.y; i++) {\r\n            for(var j = 0; j < this.props.x; j++) {\r\n                if(Math.floor(y/10) === i && Math.floor(x/10) === j){\r\n                    if(this.state.map[i][j] === 0)\r\n                        new_map[i][j] = 1;\r\n                    else\r\n                        new_map[i][j] = 0;\r\n                } else {\r\n                    new_map[i][j] = this.state.map[i][j];\r\n                }\r\n                if(new_map[i][j] === 1) \r\n                    new_rectangles.push(\r\n                        <Rect\r\n                            x={j * 10}\r\n                            y={i * 10}\r\n                            width={10}\r\n                            height={10}\r\n                            fill={\"rgb(0,0,0)\"}\r\n                        />\r\n                    );\r\n            }\r\n        }\r\n        this.setState({\r\n            map: new_map,\r\n            rectangles: new_rectangles\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        var grid = this.state.grid ? this.grid : [];\r\n        return  <div>\r\n                    <div onClick={this.onClick} > <RenderGame game={this.state.rectangles} t={this.onMouseMove} grid={grid}/></div>\r\n                    <div><ControlPanel runGame={this.runGame} \r\n                                       state={this.state.running?\"Pause\":\"Play\"}\r\n                                       empty={this.generateEmptyMapAction}\r\n                                       random={this.generateRandomMapAction}\r\n                                       grid={this.showGrid}/></div>\r\n                </div>\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        var new_rectangles = [];\r\n        for(var i = 0; i < this.props.y; i++) {\r\n            for(var j = 0; j < this.props.x; j++) {\r\n                if(this.map1[i][j] === 1) \r\n                    new_rectangles.push(\r\n                        <Rect\r\n                            x={j * 10}\r\n                            y={i * 10}\r\n                            width={10}\r\n                            height={10}\r\n                            fill={\"rgb(0,0,0)\"}\r\n                        />\r\n                    );\r\n            }\r\n        }\r\n\r\n\r\n        this.setState({\r\n            map: this.map1,\r\n            rectangles: new_rectangles\r\n        });\r\n\r\n        this.intervalID = setInterval(\r\n            () => this.tick(),\r\n            1/30\r\n        );\r\n\r\n        document.addEventListener(\"keydown\", this.onKeyPressed, false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n        document.removeEventListener(\"keydown\", this.onKeyPressed, false);\r\n    }\r\n\r\n    tick() {\r\n        if(this.state.running) {\r\n            var new_rectangles = [];\r\n            let new_map;\r\n            if(this.currentMap === 1 )  {\r\n                new_map = this.map2;\r\n                this.currentMap = 2;\r\n            } else {\r\n                new_map = this.map1;\r\n                this.currentMap = 1;\r\n            }\r\n            for(var i = 0; i < this.props.y; i++) {\r\n                for(var j = 0; j < this.props.x; j++) {\r\n                    new_map[i][j] = this.gameOfLifeRules(i, j, this);\r\n                    if(new_map[i][j] === 1) \r\n                        new_rectangles.push(\r\n                            <Rect\r\n                                x={j * 10}\r\n                                y={i * 10}\r\n                                width={10}\r\n                                height={10}\r\n                                fill={\"rgb(0,0,0)\"}\r\n                            />\r\n                        );\r\n                }\r\n            }\r\n            this.setState({\r\n                map: new_map,\r\n                rectangles: new_rectangles\r\n            });\r\n        }\r\n     }\r\n\r\n     generateRandomMap() {\r\n        var new_map = new Array(Number(this.props.y));\r\n        for(var i = 0; i < this.props.y; i++) {\r\n            new_map[i] = Array(Number(this.props.x))\r\n            for(var j = 0; j < this.props.x; j++) {\r\n                new_map[i][j] = Math.round(Math.random());\r\n            }\r\n        }\r\n        return new_map;\r\n    }\r\n\r\n    generateEmptyMap() {\r\n        var new_map = new Array(Number(this.props.y));\r\n        for(var i = 0; i < this.props.y; i++) {\r\n            new_map[i] = Array(Number(this.props.x))\r\n            for(var j = 0; j < this.props.x; j++) {\r\n                new_map[i][j] = 0;\r\n            }\r\n        }\r\n        return new_map;\r\n    }\r\n\r\n    gameOfLifeRules(i, j) {\r\n        var neighbors = this.getNeighbors(i, j);\r\n        if(this.state.map[i][j] === 1) {\r\n            if(neighbors < 2 || neighbors > 3)\r\n                return 0;\r\n            else if(neighbors === 2 || neighbors === 3)\r\n                return  1;\r\n        } else if (this.state.map[i][j] === 0) {\r\n            if(neighbors === 3)\r\n                return 1;\r\n            else\r\n                return 0;\r\n        } \r\n    }\r\n\r\n    getNeighbors(i, j) {\r\n        var total = 0;\r\n\r\n        var up = (i - 1 < 0 ? this.props.y-1 : i - 1);\r\n        var down = (i + 1 >= this.props.y ? 0 : i + 1);\r\n        var left = (j - 1 < 0 ? this.props.x-1 : j - 1);\r\n        var right = (j + 1 >= this.props.x ? 0 : j + 1);\r\n\r\n       total += this.state.map[up][left];\r\n       total += this.state.map[up][j];\r\n       total += this.state.map[up][right];\r\n       total += this.state.map[i][left];\r\n       total += this.state.map[i][right];\r\n       total += this.state.map[down][left];\r\n       total += this.state.map[down][j];\r\n       total += this.state.map[down][right];\r\n  \r\n        return total\r\n    }\r\n\r\n    onKeyPressed(e) {\r\n        if(e.key === ' ')  {\r\n           this.runGame();\r\n        }\r\n\r\n    }\r\n\r\n    runGame() {\r\n        this.setState({\r\n            running: !this.state.running\r\n        });\r\n    }\r\n\r\n    showGrid() {\r\n        this.setState({\r\n            grid: !this.state.grid\r\n        });\r\n    }\r\n\r\n    generateRandomMapAction() {\r\n        if(this.currentMap === 1) {\r\n            this.map2 = this.generateRandomMap();\r\n            this.currentMap = 2;\r\n            this.setState({\r\n                map: this.map2\r\n            });\r\n        } else {\r\n            this.map1 = this.generateRandomMap();\r\n            this.currentMap = 1;\r\n            this.setState({\r\n                map: this.map1\r\n            });\r\n        }\r\n\r\n        var new_rectangles = [];\r\n        for(var i = 0; i < this.props.y; i++) {\r\n            for(var j = 0; j < this.props.x; j++) {\r\n                if(this.state.map[i][j] === 1) \r\n                    new_rectangles.push(\r\n                        <Rect\r\n                            x={j * 10}\r\n                            y={i * 10}\r\n                            width={10}\r\n                            height={10}\r\n                            fill={\"rgb(0,0,0)\"}\r\n                        />\r\n                    );\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            rectangles: new_rectangles\r\n        });\r\n    }\r\n\r\n    generateEmptyMapAction() {\r\n        if(this.currentMap === 1) {\r\n            this.map2 = this.generateEmptyMap();\r\n            this.currentMap = 2;\r\n            this.setState({\r\n                map: this.map2\r\n            });\r\n        } else {\r\n            this.map1 = this.generateEmptyMap();\r\n            this.currentMap = 1;\r\n            this.setState({\r\n                map: this.map1\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            rectangles: []\r\n        });\r\n    }\r\n}\r\n\r\nfunction ControlPanel(props) {\r\nreturn  <div>\r\n            <button onClick={props.runGame}> {props.state} </button>\r\n            <button onClick={props.empty}> New Empty Map </button>\r\n            <button onClick={props.random}> New Random Map </button>\r\n            <button onClick={props.grid}> Grid </button>\r\n        </div>\r\n\r\n\r\n\r\n}\r\n\r\nfunction RenderGame(props) {\r\n    return( <div>\r\n                <Stage  width={window.innerWidth} height={window.innerHeight}  >\r\n                    <Layer>\r\n                        {props.game}\r\n                    </Layer>\r\n                    <Layer>\r\n                        {props.grid}\r\n                    </Layer>\r\n                </Stage>\r\n            </div>)\r\n}\r\n\r\nexport default GameOfLife;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport GameOfLife from './GameOfLife';\n\nReactDOM.render(<GameOfLife x={Math.floor(window.innerWidth / 10)} y={Math.floor(window.innerHeight / 10)} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}